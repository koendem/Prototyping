// Name:ExprLang.jjt
// Author: David Sinclair      Date: 29 Aug 2012
//
// Definition of the ExprLang language, including abstract syntax tree generation
//

options
{
  IGNORE_CASE = false;
  MULTI=true;
  VISITOR = true;
  STATIC=false;
}

PARSER_BEGIN(ExprLang)
package com.silvermoongroup.testlanguage;

import java.io.*;
import java.util.*;
import com.silvermoongroup.testlanguage.utils.*;


public class ExprLang
{
  public Hashtable ST = new Hashtable();


}

PARSER_END(ExprLang)

TOKEN_MGR_DECLS:
{
  static int linenumber = 0;
}

SKIP:   /* Whitespace */
{
  "\t"
| "\n" {linenumber++;}
| "\r"
| " "
}

TOKEN:
{
  <LPAREN: "(">
| <RPAREN: ")">
| <ADD_OP: "+" | "-">
| <MULT_OP: "*" | "/">
| <NOT_OP: "~">
| <BOOL_OP: "&" | "|">
| <INT: "int">
| <BOOL: "bool">
| <NUMBER: (["0"-"9"])+>
| <ID: (["a"-"z","A"-"Z"])+>
| <SEMIC: ";">
}



SimpleNode program() : {}
{
  Stms() <EOF> {return jjtThis;}
}

void Stms() #void : {}
{
  (SimpleStm() <SEMIC> [Stms() #Stms(2)] )
}

void SimpleStm() #void : {}
{
  (expression())
 | (declaration())
}

void declaration() #void : {Token t; String name;}
{
  t = <INT> name = identifier() {jjtThis.value = t.image;
                          ST.put(name, new STC("Int", name));} #Decl(1)
| t = <BOOL> name = identifier() {jjtThis.value = t.image;
                           ST.put(name, new STC("Bool", name));} #Decl(1)
}


void expression() #void : {Token t;}
{
  term()
  (
    (t = <ADD_OP> term() {jjtThis.value = t.image;} #Add_op(2)
    )
  | (t = <BOOL_OP> term() {jjtThis.value = t.image;} #Bool_op(2)
    )
  )*
}

void term() #void : {Token t;}
{
  <NOT_OP> factor() #Not_op(1)
|
  factor()
  (t = <MULT_OP> factor() {jjtThis.value = t.image;} #Mult_op(2)
  )*
}

void factor() #void : {}
{
  (<LPAREN> expression() #Exp(1) <RPAREN>
  | number()
  | identifier()
  )
}

void number() : {Token t;}
{
  t = <NUMBER> {jjtThis.value = t.image;
               }
}

String identifier() : {Token t;}
{
  t = <ID> {jjtThis.value = t.image; return t.image;}
}

