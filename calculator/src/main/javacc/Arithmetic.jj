options
{
    LOOKAHEAD=2;
    STATIC=false;
}
PARSER_BEGIN(Arithmetic)

package com.silvermoongroup.calculatorgrammar;
import java.io.*;

public class Arithmetic
{
    public static void main(String args[]) throws ParseException
    {
        Arithmetic parser = new Arithmetic(System.in);
        while (true)
        {
            parser.parseOneLine();
        }
    }
}

PARSER_END(Arithmetic)

SKIP :
{
    " "
|   "\r"
|   "\t"
}

TOKEN:
{
    < NUMBER: (<DIGIT>)+ ( "." (<DIGIT>)+ )? >
|   < DIGIT: ["0"-"9"] >
|   < EOL: "\n" >

}

void parseOneLine():
{
 double a;
}
{
   a=expr() <EOL>    {System.out.println(a); }
 | <EOL>
 | <EOF> {System.exit(-1);}
}

double expr():
{
  double a;
  double b;
}
{
    a = term()
    (  "+" b= expr() { a+= b;}
     | "-" b=expr() {a-=b;}
    )*  {return a;}
}
double term():
{
 double a;
 double b;
}
{
    a= unary()
    (
       "*" b=term()  { a*= b;}
     | "/" b=term()  { a/= b;}
     )*  {return a;}

}
double unary():
{
 double a;
}
{
    "-" a=element() { return -a;}
   | a=element()  { return a;}
}
double element():
{
  Token t;
  double a;
}
{
  t=<NUMBER>   {return Double.parseDouble(t.toString());}
  | "(" a=expr() ")" {return a;}
}
