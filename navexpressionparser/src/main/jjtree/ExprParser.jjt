// Name:ExprParser.jjt
// Date: 29 June 2016
//
// Definition of the ExprParser syntax. Includes abstract syntax tree generation
//

options
{
  LOOKAHEAD=4;
  IGNORE_CASE = false;
  MULTI=true;
  VISITOR = true;
  STATIC=false;
  NODE_CLASS="com.silvermoongroup.navexpressionparser.NavExpressionSimpleNode";
}

PARSER_BEGIN(ExprParser)
package com.silvermoongroup.navexpressionparser;

import java.io.*;
import java.util.*;


public class ExprParser
{



}

PARSER_END(ExprParser)

TOKEN_MGR_DECLS:
{

}

SKIP:   /* Whitespace */
{
  "\t"
| "\n"
| "\r"

}

TOKEN:
{
  <CONCAT: ".">
| <LITERAL: "\""(["a"-"z","A"-"Z","0"-"9", " ", "<", ">", "&","/","'",".","-"])+ "\"" >
| <KINDSTEP: ((["a"-"z","A"-"Z","0"-"9"])+  | ("\'"(["a"-"z","A"-"Z","0"-"9"," "])+  "\'")
             ) >
| <SEMIC: ";">
| <DOMAINSTEP: (["a"-"z","A"-"Z", "_"])+>
}


/* production rules for the language.
navPathExpression =
              <LITERAL>
| kindNavigation
| domainNavigation


kindNavigation =
         <KINDSTEP>
        | <KINDSTEP>  <CONCAT>  kindNavigation


domainNavigation = kindNavigation <SEMIC> domainSteps

domainSteps = <DOMAINSTEP> ( <CONCAT>  <DOMAINSTEP>)*

*/

SimpleNode navPathExpression() : {}
{
 (   literal()
  | (domainNavigation())
  | (kindNavigation())
 ) {return jjtThis;}
}

void literal() :
{
  Token t;
}
{
    t = <LITERAL> {jjtThis.value = t.image; /* where is this processed*/}
}


void kindNavigation() #void : {}
{
    (kindStep())  [ <CONCAT> kindNavigation() #KindNavigation(2) ]
}

void kindStep() : {Token t; }
{
  t = <KINDSTEP> {jjtThis.value = t.image; }
}

void domainNavigation() #void : {}
{
 (kindNavigation()) <SEMIC> domainSteps() {}
}

void domainSteps() #void : {}
{
    (domainStep())  [ <CONCAT> domainSteps() #DomainSteps(2) ]
}

void domainStep() : {Token t; }
{
 t = <DOMAINSTEP> {jjtThis.value = t.image;}
}


